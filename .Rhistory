plot(0:1, 0:1, type="n", ann=F, axes=F, asp=asp, main=main)
graphics::rasterImage(img, 0, 0, 1, 1)
}
path
# if plotting is on, plot masked image
if (plotting) {
asp <- dim(masked)[1]/dim(masked)[2]
main <- tail(strsplit(path, split="[.]")[[1]], 1)
plot(0:1, 0:1, type="n", ann=F, axes=F, asp=asp, main=main)
graphics::rasterImage(masked, 0, 0, 1, 1)
}
par(mfrow(mar=rep(3,4)))
par(mar=rep(3,4))
# if plotting is on, plot masked image
if (plotting) {
asp <- dim(masked)[1]/dim(masked)[2]
main <- tail(strsplit(path, split="[.]")[[1]], 1)
plot(0:1, 0:1, type="n", ann=F, axes=F, asp=asp, main=main)
graphics::rasterImage(masked, 0, 0, 1, 1)
}
par()
# if plotting is on, plot masked image
if (plotting) {
current_par <- par()
par(mar=rep(0,4))
asp <- dim(masked)[1]/dim(masked)[2]
main <- tail(strsplit(path, split="[.]")[[1]], 1)
plot(0:1, 0:1, type="n", ann=F, axes=F, asp=asp, main=main)
graphics::rasterImage(masked, 0, 0, 1, 1)
par(current_par)
}
par() <- current_par()
?par
# if plotting is on, plot masked image
if (plotting) {
op <- par(mar=rep(0,4))
asp <- dim(masked)[1]/dim(masked)[2]
main <- tail(strsplit(path, split="[.]")[[1]], 1)
plot(0:1, 0:1, type="n", ann=F, axes=F, asp=asp, main=main)
graphics::rasterImage(masked, 0, 0, 1, 1)
par(op)
}
for (i in 1:length(paths)) {
countColor(paths[i], lower=lower, upper=upper, bg.lower=rep(0, 3), bg.upper=rep(0.2, 3), plotting=TRUE)
}
source("./countColor.R")
for (i in 1:length(paths)) {
countColor(paths[i], lower=lower, upper=upper, bg.lower=rep(0, 3), bg.upper=rep(0.2, 3), plotting=TRUE)
}
lower <- c(110,70,80)/255
upper <- c(165,155,150)/255
for (i in 1:length(paths)) {
countColor(paths[i], lower=lower, upper=upper, bg.lower=rep(0, 3), bg.upper=rep(0.2, 3), plotting=TRUE, target.color = "yellow")
}
for (i in 1:length(paths)) {
par(mfrow=c(2, 3))
countColor(paths[i], lower=lower, upper=upper, bg.lower=rep(0, 3), bg.upper=rep(0.2, 3), plotting=TRUE, target.color = "yellow")
}
par(mfrow=c(2, 3))
for (i in 1:length(paths)) {
countColor(paths[i], lower=lower, upper=upper, bg.lower=rep(0, 3), bg.upper=rep(0.2, 3), plotting=TRUE, target.color = "yellow")
}
path
# read in image, ignoring background if provided
# doesn't necessarily matter for calculating number of pixels though
img <- colordistance::loadImage(path, lower=bg.lower, upper=bg.upper)
original <- img$original.rgb
# find all pixels within target range + get their locations
idx <- which((lower[1]<=original[, , 1] & original[, , 1]<=upper[1]) &
(lower[2]<=original[, , 2] & original[, , 2]<=upper[2]) &
(lower[3]<=original[, , 3] & original[, , 3]<=upper[3]), arr.ind=T)
# make sure target color is an RGB triplet
if (is.character(target.color)) {
target.color <- as.vector(col2rgb(target.color)/255)
}
if (length(target.color) != 3) {
stop("'target.color' must be a numeric vector of length 3 with values between 0 and 1")
} else if (range(target.color)[2] > 1) {
target.color <- target.color/255
}
# change all target pixels to target color to check mapping
masked <- original
for (i in 1:nrow(idx)) {
masked[idx[i,1], idx[i,2], ] <- target.color
}
# calculate area
area <- nrow(idx)/dim(img$filtered.rgb.2d)[1]
area
for (i in 1:length(paths)) {
area <- countColor(paths[i], lower=lower, upper=upper, bg.lower=rep(0, 3), bg.upper=rep(0.2, 3), plotting=TRUE, target.color = "yellow"); area
}
for (i in 1:length(paths)) {
area <- countColor(paths[i], lower=lower, upper=upper, bg.lower=rep(0, 3), bg.upper=rep(0.2, 3), plotting=TRUE, target.color = "yellow")
print(area)
}
for (i in 1:length(paths)) {
area <- countColor(paths[i], lower=lower, upper=upper, bg.lower=rep(0, 3), bg.upper=rep(0.2, 3), plotting=TRUE, target.color = "yellow")
print(area)*100
}
for (i in 1:length(paths)) {
area <- countColor(paths[i], lower=lower, upper=upper, bg.lower=rep(0, 3), bg.upper=rep(0.2, 3), plotting=TRUE, target.color = "yellow")
print(area*100)
}
source('~/Dropbox/Westneat_Lab/batwingAnalysis/countColor.R')
path <- "Wing_images/DSC_1675.jpeg"
colordistance::loadImage(path, lower=rep(0, 3), upper=rep(0.25, 3), hsv=FALSE)
img <- colordistance::loadImage(path, lower=rep(0, 3), upper=rep(0.25, 3), hsv=FALSE)
# test: get rid of magenta
upper <- c(255, 100, 255)/255
lower <- c(180, 0, 180)/255
original <- img$original.rgb
# find all pixels within target range + get their locations
idx <- which((lower[1]<=original[, , 1] & original[, , 1]<=upper[1]) &
(lower[2]<=original[, , 2] & original[, , 2]<=upper[2]) &
(lower[3]<=original[, , 3] & original[, , 3]<=upper[3]), arr.ind=T)
masked <- original
apply(idx, 1, function(i) masked[i[1], i[2], ] <- target.color)
idx
# find all pixels within target range + get their locations
idx <- which((lower[1]<=original[, , 1] & original[, , 1]<=upper[1]) &
(lower[2]<=original[, , 2] & original[, , 2]<=upper[2]) &
(lower[3]<=original[, , 3] & original[, , 3]<=upper[3]), arr.ind=T)
idx
upper
lower
img <- colordistance::loadImage(path, lower=rep(0, 3), upper=rep(0.25, 3), hsv=FALSE)
original <- img$original.rgb
# find all pixels within target range + get their locations
idx <- which((lower[1]<=original[, , 1] & original[, , 1]<=upper[1]) &
(lower[2]<=original[, , 2] & original[, , 2]<=upper[2]) &
(lower[3]<=original[, , 3] & original[, , 3]<=upper[3]), arr.ind=T)
idx
# test: get rid of magenta
upper <- c(255, 100, 255)/255
lower <- c(180, 0, 180)/255
upper
lower
dim(original)
# find all pixels within target range + get their locations
idx <- which((lower[1]<=original[, , 1] & original[, , 1]<=upper[1]) &
(lower[2]<=original[, , 2] & original[, , 2]<=upper[2]) &
(lower[3]<=original[, , 3] & original[, , 3]<=upper[3]), arr.ind=T)
idx
lower <- c(100, 0, 100)/255
# find all pixels within target range + get their locations
idx <- which((lower[1]<=original[, , 1] & original[, , 1]<=upper[1]) &
(lower[2]<=original[, , 2] & original[, , 2]<=upper[2]) &
(lower[3]<=original[, , 3] & original[, , 3]<=upper[3]), arr.ind=T)
idx
dim(idx)
400*600
# changePixelColor: change all pixels within a target range to a target (diagnostic) color and return 3D array
#
# plotArrayAsImage: plot a 3D array as an RGB image
# needs error handling; only accepts 3D arrays, interprets them in RGB space
plotArrayAsImage <- function(RGB_array, main="") {
op <- par(mar=rep(0,4))
asp <- dim(RGB_array)[1]/dim(RGB_array)[2]
plot(0:1, 0:1, type="n", ann=F, axes=F, asp=asp, main=main)
graphics::rasterImage(RGB_array, 0, 0, 1, 1)
par(op)
}
masked <- original
apply(idx, 1, function(i) masked[i[1], i[2], ] <- target.color)
for (i in 1:nrow(idx)) {
masked[idx[i,1], idx[i,2], ] <- target.color
}
plotArrayAsImage(masked)
par(mfrow=c(1,1))
plotArrayAsImage(masked)
masked <- original
for (i in 1:nrow(idx)) {
masked[idx[i,1], idx[i,2], ] <- target.color
}
plotArrayAsImage(masked)
path <- "Wing_images/DSC_1678.jpeg"
img <- colordistance::loadImage(path, lower=rep(0, 3), upper=rep(0.25, 3), hsv=FALSE)
original <- img$original.rgb
plotArrayAsImage(original)
# test: get rid of magenta
upper <- c(255, 100, 255)/255
lower <- c(100, 0, 100)/255
center <- c(200, 70, 200)/255
radius <- 0.1
# find all pixels within target range + get their locations
idx <- which((lower[1]<=original[, , 1] & original[, , 1]<=upper[1]) &
(lower[2]<=original[, , 2] & original[, , 2]<=upper[2]) &
(lower[3]<=original[, , 3] & original[, , 3]<=upper[3]), arr.ind=T)
masked <- original
for (i in 1:nrow(idx)) {
masked[idx[i,1], idx[i,2], ] <- target.color
}
plotArrayAsImage(masked)
rectangularRange <- function(pixel.array, upper, lower, target.color="green") {
# find all pixels within target range + get their locations
idx <- which((lower[1]<=pixel.array[, , 1] & pixel.array[, , 1]<=upper[1]) &
(lower[2]<=pixel.array[, , 2] & pixel.array[, , 2]<=upper[2]) &
(lower[3]<=pixel.array[, , 3] & pixel.array[, , 3]<=upper[3]), arr.ind=T)
# change
for (i in 1:nrow(idx)) {
pixel.array[idx[i,1], idx[i,2], ] <- target.color
}
plotArrayAsImage(pixel.array)
}
rectangularRange(img$original.rgb, upper=upper, lower=lower, target.color=target.color)
target.color <- "tomato"
rectangularRange(img$original.rgb, upper=upper, lower=lower, target.color=target.color)
rectangularRange <- function(pixel.array, upper, lower, target.color="green") {
# find all pixels within target range + get their locations
idx <- which((lower[1]<=pixel.array[, , 1] & pixel.array[, , 1]<=upper[1]) &
(lower[2]<=pixel.array[, , 2] & pixel.array[, , 2]<=upper[2]) &
(lower[3]<=pixel.array[, , 3] & pixel.array[, , 3]<=upper[3]), arr.ind=T)
# make sure target color is an RGB triplet
if (is.character(target.color)) {
target.color <- as.vector(col2rgb(target.color)/255)
}
if (length(target.color) != 3) {
stop("'target.color' must be a numeric vector of length 3 with values between 0 and 1")
} else if (range(target.color)[2] > 1) {
target.color <- target.color/255
}
# change
for (i in 1:nrow(idx)) {
pixel.array[idx[i,1], idx[i,2], ] <- target.color
}
plotArrayAsImage(pixel.array)
}
rectangularRange(img$original.rgb, upper=upper, lower=lower, target.color=target.color)
upper <- c(255, 100, 255)/255
lower <- c(150, 0, 150)/255
pixel.array <- img$original.rgb
target.color <- "tomato"
rectangularRange(img$original.rgb, upper=upper, lower=lower, target.color=target.color)
upper <- c(255, 100, 255)/255
lower <- c(140, 0, 140)/255
pixel.array <- img$original.rgb
target.color <- "tomato"
rectangularRange(img$original.rgb, upper=upper, lower=lower, target.color=target.color)
1:(dim(pixel.array)[1]*dim(pixel.array)[2])
length91:(dim(pixel.array)[1]*dim(pixel.array)[2]))
length(1:(dim(pixel.array)[1]*dim(pixel.array)[2]))
i
j
i=45
j=78
pixel.array[i, j, ]
pixel.distances[i, j] <- sqrt(sum((pixel.array[i, j, ] - center)^2))
pixel.distances <- matrix(NA, nrow = dim(pixel.array)[1], ncol=dim(pixel.array)[2])
pixel.distances[i, j] <- sqrt(sum((pixel.array[i, j, ] - center)^2))
pixel.distances[i,j]
pixel.distances <- matrix(NA, nrow = dim(pixel.array)[1], ncol=dim(pixel.array)[2])
# for every pixel, calculate distance from center
for (i in 1:dim(pixel.array)[1]) {
for (j in 1:dim(pixel.array)[2]) {
pixel.distances[i, j] <- sqrt(sum((pixel.array[i, j, ] - center)^2))
}
}
# index every pixel with distance <= radius
which(pixel.distances <= radius)
# index every pixel with distance <= radius
length(which(pixel.distances <= radius))
length(pixel.distances)
sqrt(sum((rep(0, 3) - rep(1, 3))^2))
# index every pixel with distance <= radius
length(which(pixel.distances <= radius, arr.ind = T))
radius
# assuming RGB, change radius percent to fraction of maximum distance in RGB space
radius <- radius*sqrt(sum((rep(0, 3) - rep(1, 3))^2))
pixel.distances <- matrix(NA, nrow = dim(pixel.array)[1], ncol=dim(pixel.array)[2])
# for every pixel, calculate distance from center
for (i in 1:dim(pixel.array)[1]) {
for (j in 1:dim(pixel.array)[2]) {
pixel.distances[i, j] <- sqrt(sum((pixel.array[i, j, ] - center)^2))
}
}
dim(pixel.distances)
pixel.distances[1:10, 1:10]
pixel.distances[149:192, 312:400]
# index every pixel with distance <= radius
length(which(pixel.distances <= radius, arr.ind = T))
# index every pixel with distance <= radius
idx <- which(pixel.distances <= radius, arr.ind = T)
dim(idx)
sphericalRange(img$original.rgb, center=center, radius=radius, target.color=target.color)
# sphericalRange: find pixels within a given radius of a specified point
sphericalRange <- function(pixel.array, center, radius, target.color="green") {
# assuming RGB, change radius percent to fraction of maximum distance in RGB space
radius <- radius*sqrt(sum((rep(0, 3) - rep(1, 3))^2))
pixel.distances <- matrix(NA, nrow = dim(pixel.array)[1], ncol=dim(pixel.array)[2])
# for every pixel, calculate distance from center
for (i in 1:dim(pixel.array)[1]) {
for (j in 1:dim(pixel.array)[2]) {
pixel.distances[i, j] <- sqrt(sum((pixel.array[i, j, ] - center)^2))
}
}
# index every pixel with distance <= radius
idx <- which(pixel.distances <= radius, arr.ind = T)
# change colors
# make sure target color is an RGB triplet
if (is.character(target.color)) {
target.color <- as.vector(col2rgb(target.color)/255)
}
if (length(target.color) != 3) {
stop("'target.color' must be a numeric vector of length 3 with values between 0 and 1")
} else if (range(target.color)[2] > 1) {
target.color <- target.color/255
}
# change colors
for (i in 1:nrow(idx)) {
pixel.array[idx[i,1], idx[i,2], ] <- target.color
}
plotArrayAsImage(pixel.array)
}
sphericalRange(img$original.rgb, center=center, radius=radius, target.color=target.color)
rectangularRange(img$original.rgb, upper=upper, lower=lower, target.color=target.color)
target.color <- "cyan"
rectangularRange(img$original.rgb,
upper=c(255, 100, 255)/255,
lower=c(140, 0, 140)/255,
target.color=target.color)
rectangularRange(img$original.rgb,
upper=c(255, 100, 255)/255,
lower=c(140, 0, 140)/255,
target.color="cyan")
sphericalRange(img$original.rgb,
center=c(200, 70, 200)/255,
radius=0.1,
target.color="tomato")
# rectangularRange: find pixels within a target range defined by ranges in each channel
rectangularRange <- function(pixel.array, upper, lower, target.color="green", main="") {
# find all pixels within target range + get their locations
idx <- which((lower[1]<=pixel.array[, , 1] & pixel.array[, , 1]<=upper[1]) &
(lower[2]<=pixel.array[, , 2] & pixel.array[, , 2]<=upper[2]) &
(lower[3]<=pixel.array[, , 3] & pixel.array[, , 3]<=upper[3]), arr.ind=T)
# make sure target color is an RGB triplet
if (is.character(target.color)) {
target.color <- as.vector(col2rgb(target.color)/255)
}
if (length(target.color) != 3) {
stop("'target.color' must be a numeric vector of length 3 with values between 0 and 1")
} else if (range(target.color)[2] > 1) {
target.color <- target.color/255
}
# change colors
for (i in 1:nrow(idx)) {
pixel.array[idx[i,1], idx[i,2], ] <- target.color
}
plotArrayAsImage(pixel.array, main=main)
# what to return? color target array? idx? pct in range?
}
# sphericalRange: find pixels within a given radius of a specified point
sphericalRange <- function(pixel.array, center, radius, target.color="green", main="") {
# assuming RGB, change radius percent to fraction of maximum distance in RGB space
radius <- radius*sqrt(sum((rep(0, 3) - rep(1, 3))^2))
pixel.distances <- matrix(NA, nrow = dim(pixel.array)[1], ncol=dim(pixel.array)[2])
# for every pixel, calculate distance from center
for (i in 1:dim(pixel.array)[1]) {
for (j in 1:dim(pixel.array)[2]) {
pixel.distances[i, j] <- sqrt(sum((pixel.array[i, j, ] - center)^2))
}
}
# index every pixel with distance <= radius
idx <- which(pixel.distances <= radius, arr.ind = T)
# change colors
# make sure target color is an RGB triplet
if (is.character(target.color)) {
target.color <- as.vector(col2rgb(target.color)/255)
}
if (length(target.color) != 3) {
stop("'target.color' must be a numeric vector of length 3 with values between 0 and 1")
} else if (range(target.color)[2] > 1) {
target.color <- target.color/255
}
# change colors
for (i in 1:nrow(idx)) {
pixel.array[idx[i,1], idx[i,2], ] <- target.color
}
plotArrayAsImage(pixel.array, main=main)
}
mean(c(255, 140))
rectangularRange(img$original.rgb,
upper=c(255, 100, 255)/255,
lower=c(140, 0, 140)/255,
target.color="cyan",
main="Rectangular range")
sphericalRange(img$original.rgb,
center=c(197.5, 50, 197.5)/255,
radius=0.1,
target.color="tomato",
main="")
200/255
70/255
sphericalRange(img$original.rgb,
center=c(0.75, 0.25, 0.75),
radius=0.1,
target.color="tomato",
main="Spherical range")
sphericalRange(img$original.rgb,
center=c(0.78, 0.25, 0.78),
radius=0.1,
target.color="tomato",
main="Spherical range")
sphericalRange(img$original.rgb,
center=c(200, 70, 200)/255,
radius=0.15,
target.color="tomato",
main="")
sphericalRange(img$original.rgb,
center=c(200, 70, 200)/255,
radius=0.25,
target.color="tomato",
main="")
sphericalRange(img$original.rgb,
center=c(200, 70, 200)/255,
radius=0.35,
target.color="tomato",
main="")
sphericalRange(img$original.rgb,
center=c(200, 70, 200)/255,
radius=0.1,
target.color="tomato",
main="")
sphericalRange(img$original.rgb,
center=c(200, 70, 200)/255,
radius=0.11,
target.color="tomato",
main="")
sphericalRange(img$original.rgb,
center=c(200, 70, 200)/255,
radius=0.12,
target.color="tomato",
main="")
sphericalRange(img$original.rgb,
center=c(200, 70, 200)/255,
radius=0.13,
target.color="tomato",
main="")
sphericalRange(img$original.rgb,
center=c(200, 70, 200)/255,
radius=0.14,
target.color="tomato",
main="")
sphericalRange(img$original.rgb,
center=c(200, 70, 200)/255,
radius=0.15,
target.color="tomato",
main="")
sphericalRange(img$original.rgb,
center=c(200, 70, 200)/255,
radius=0.16,
target.color="tomato",
main="")
main="beebo"
plot(0:1, 0:1, type="n", ann=F, axes=F, asp=asp, main=main)
par()
par(mar=rep(4,4))
plot(0:1, 0:1, type="n", ann=F, axes=F, asp=asp, main=main)
plot(c(1:10), main=main)
radii <- seq(0.1, 1, 0.15)
radii
radii <- seq(0.1, 1, 0.2)
radii
radii <- seq(0, 1, 0.2)
radii
par(mfrow=c(2, 3))
for (i in radii) {
sphericalRange(img$original.rgb,
center=c(220, 220, 220)/255,
radius=i,
target.color = "tomato")
}
i
radii <- seq(0.01, 1, 0.2)
radii
radii <- seq(0.2, 1, 0.2)
par(mfrow=c(2, 3))
for (i in radii) {
sphericalRange(img$original.rgb,
center=c(220, 220, 220)/255,
radius=i,
target.color = "tomato")
}
pelicans <- "Images/Fun/pelicans.jpg"
img <- colordistance::loadImage(pelicans)
radii <- seq(0.2, 1, 0.2)
par(mfrow=c(2, 3))
for (i in radii) {
sphericalRange(img$original.rgb,
center=c(220, 220, 220)/255,
radius=i,
target.color = "tomato")
}
radii
pelicans <- "Images/Fun/pelicans.jpg"
img <- colordistance::loadImage(pelicans)
radii <- seq(0.2, 1, 0.2)
par(mfrow=c(2, 3))
plotArrayAsImage(img$original.rgb)
for (i in radii) {
sphericalRange(img$original.rgb,
center=c(220, 220, 220)/255,
radius=i,
target.color = "tomato")
}
lizard <- "Images/Fun/gecko.jpg"
img <- colordistance::loadImage(lizard)
par(mfrow=c(2, 1))
plotArrayAsImage(img$original.rgb)
sphericalRange(img$original.rgb,
center=c(20, 20, 20)/255,
radius=0.1,
target.color = "red")
